#!/bin/bash

#
# print help
#

do_help() {
  echo "usage: ${0} <command> [args]"
  echo ''
  echo 'commands:'
  echo '  help                      print this help and exit'
  echo ''
  echo '  raw <command> [args]      run a raw "vmrun" command'
  echo ''
  echo '  info [options] <vm>       show information about a virtual machine'
  echo '    -p, --path                print path'
  echo '    -i, --ip                  print ip address'
  echo '    -a, --all                 print all of the above (default)'
  echo ''
  echo '  list [options]            list all virtual machines'
  echo '    -a, --all                 list all virtual machines (default)'
  echo '    -r, --running             list only running virtual machines'
  echo ''
  echo '  start [options] <vm>      start a virtual machine'
  echo '    -g, --gui                 start virtual machine with gui (default)'
  echo '    -n, --nogui               start virtual machine headless'
  echo ''
  echo '  stop [options] <vm>       shutdown a virtual machine'
  echo '    -s, --soft                wait for virtual machine to shutdown (default)'
  echo '    -h, --hard                force virtual machine power off'
  echo ''
  echo '  restart [options] <vm>    restart a virtual machine'
  echo '    -s, --soft                wait for virtual machine to restart (default)'
  echo '    -h, --hard                force virtual machine power reset'
  echo ''
  echo '  suspend [options] <vm>    suspend a virtual machine'
  echo '    -s, --soft                wait for virtual machine to sleep (default)'
  echo '    -h, --hard                save virtual machine state'
  echo ''
  echo '  pause <vm>                pause a virtual machine'
  echo '  unpause <vm>              unpause a virtual machine'
  exit ${1}
}

#
# run a raw "vmrun" command
#

do_raw() {
  do_vmrun "${@}"
}

#
# print information about a virtual machine
#

do_info() {
  args=()
  path='false'
  ip='false'
  all='false'

  parse='true'
  while [[ -n "${1}" ]]; do
    if ${parse}; then
      case "${1}" in
        -p|--path)
          path='true';;
        -i|--ip)
          ip='true';;
        -a|--all)
          all='true';;
        --)
          parse='false';;
        -*)
          echo "info: invalid option: ${cmd}" >&2; echo '' >&2; do_help 1 >&2;;
        *)
          args+=("${1}");;
      esac
    else
      args+=("${1}")
    fi

    shift
  done

  set -- "${args[@]}"

  if [[ -z "${1}" ]]; then
    do_help 1 >&2
  fi

  if ! $path && ! $ip && ! $all; then
    all='true'
  fi

  vm_path=`vm_glob "${1}"`

  if [[ -z "${vm_path}" ]]; then
    echo "error: vm glob '${1}' is ambibious"
    exit 1
  fi

  if $path || $all; then
    echo "${vm_path}"
  fi

  if $ip || $all; then
    ip=`do_vmrun 'getGuestIPAddress' "${vm_path}"`

    if [[ -z "${ip}" || "${ip}" = Error:* ]]; then
      ip='unknown'
    fi

    echo "${ip}"
  fi
}

#
# list virtual machines
#

do_list() {
  args=()
  all='true'

  parse='true'
  while [[ -n "${1}" ]]; do
    if ${parse}; then
      case "${1}" in
        -a|--all)
          all='true';;
        -r|--running)
          all='false';;
        --)
          parse='false';;
        -*)
          echo "list: invalid option: ${cmd}" >&2; echo '' >&2; do_help 1 >&2;;
        *)
          args+=("${1}");;
      esac
    else
      args+=("${1}")
    fi

    shift
  done

  (if ${all}; then
    ls $HOME/Documents/Virtual\ Machines*/*/*.vmx
  else
    do_vmrun 'list' | sed '1d'
  fi) | while read path; do
    echo "${path##*/}"
  done
}

#
# start a virtual machine
#

do_start() {
  args=()
  gui='gui'

  parse='true'
  while [[ -n "${1}" ]]; do
    if ${parse}; then
      case "${1}" in
        -g|--gui)
          gui='gui';;
        -n|--nogui)
          gui='nogui';;
        --)
          parse='false';;
        -*)
          echo "start: invalid option: ${cmd}" >&2; echo '' >&2; do_help 1 >&2;;
        *)
          args+=("${1}");;
      esac
    else
      args+=("${1}")
    fi

    shift
  done

  set -- "${args[@]}"

  if [[ -z "${1}" ]]; then
    do_help 1 >&2
  fi

  vm_path=`vm_glob "${1}"`

  if [[ -z "${vm_path}" ]]; then
    echo "error: vm glob '${1}' is ambibious"
    exit 1
  fi

  do_vmrun 'start' "${vm_path}" "${gui}"
}

#
# stop a virtual machine
#

do_stop() {
  args=()
  hard='soft'

  parse='true'
  while [[ -n "${1}" ]]; do
    if ${parse}; then
      case "${1}" in
        -s|--soft)
          hard='soft';;
        -h|--hard)
          hard='hard';;
        --)
          parse='false';;
        -*)
          echo "stop: invalid option: ${cmd}" >&2; echo '' >&2; do_help 1 >&2;;
        *)
          args+=("${1}");;
      esac
    else
      args+=("${1}")
    fi

    shift
  done

  set -- "${args[@]}"

  if [[ -z "${1}" ]]; then
    do_help 1 >&2
  fi

  vm_path=`vm_glob "${1}"`

  if [[ -z "${vm_path}" ]]; then
    echo "error: vm glob '${1}' is ambibious"
    exit 1
  fi

  do_vmrun 'stop' "${vm_path}" "${hard}"
}

#
# restart a virtual machine
#

do_restart() {
  args=()
  hard='soft'

  parse='true'
  while [[ -n "${1}" ]]; do
    if ${parse}; then
      case "${1}" in
        -s|--soft)
          hard='soft';;
        -h|--hard)
          hard='hard';;
        --)
          parse='false';;
        -*)
          echo "restart: invalid option: ${cmd}" >&2; echo '' >&2; do_help 1 >&2;;
        *)
          args+=("${1}");;
      esac
    else
      args+=("${1}")
    fi

    shift
  done

  set -- "${args[@]}"

  if [[ -z "${1}" ]]; then
    do_help 1 >&2
  fi

  vm_path=`vm_glob "${1}"`

  if [[ -z "${vm_path}" ]]; then
    echo "error: vm glob '${1}' is ambibious"
    exit 1
  fi

  do_vmrun 'reset' "${vm_path}" "${hard}"
}

#
# suspend a virtual machine
#

do_suspend() {
  args=()
  hard='soft'

  parse='true'
  while [[ -n "${1}" ]]; do
    if ${parse}; then
      case "${1}" in
        -s|--soft)
          hard='soft';;
        -h|--hard)
          hard='hard';;
        --)
          parse='false';;
        -*)
          echo "suspend: invalid option: ${cmd}" >&2; echo '' >&2; do_help 1 >&2;;
        *)
          args+=("${1}");;
      esac
    else
      args+=("${1}")
    fi

    shift
  done

  set -- "${args[@]}"

  if [[ -z "${1}" ]]; then
    do_help 1 >&2
  fi

  vm_path=`vm_glob "${1}"`

  if [[ -z "${vm_path}" ]]; then
    echo "error: vm glob '${1}' is ambibious"
    exit 1
  fi

  do_vmrun 'suspend' "${vm_path}" "${hard}"
}

#
# pause a virtual machine
#

do_pause() {
  if [[ -z "${1}" ]]; then
    do_help 1 >&2
  fi

  vm_path=`vm_glob "${1}"`

  if [[ -z "${vm_path}" ]]; then
    echo "error: vm glob '${1}' is ambibious"
    exit 1
  fi

  do_vmrun 'pause' "${vm_path}"
}

#
# unpause a virtual machine
#

do_unpause() {
  if [[ -z "${1}" ]]; then
    do_help 1 >&2
  fi

  vm_path=`vm_glob "${1}"`

  if [[ -z "${vm_path}" ]]; then
    echo "error: vm glob '${1}' is ambibious"
    exit 1
  fi

  do_vmrun 'unpause' "${vm_path}"
}

#
# shorthand to call vmrun
#

do_vmrun() {
  vmrun=`type -p vmrun`

  if [[ -z "${vmrun}" && -x /Applications/VMware\ Fusion.app/Contents/Library/vmrun ]]; then
    vmrun=/Applications/VMware\ Fusion.app/Contents/Library/vmrun
  fi

  "${vmrun}" "${@}"
}

#
# find a vm path by name
#

vm_glob() {
  if [[ "${1:0:1}" != '/' ]]; then
    glob="${HOME}/Documents/Virtual Machines*/*/${1}"
    if [[ "${glob}" != *vmx ]]; then
      glob="${glob}*vmx"
    fi
    glob="${glob// /\ }"
    shopt -s nullglob
    eval "list=(${glob})"
    shopt -u nullglob
    echo "${list[0]}"
  else
    echo "${1}"
  fi
}

#
# main
#

cmd="${1}"
[[ -z "${cmd}" ]] && cmd="list"
shift

case "${cmd}" in
  # help
  help|-h|--help)
    do_help 0 >&1;;

  # raw
  raw|--raw)
    do_raw "${@}";;

  # info
  info|-i|--info)
    do_info "${@}";;

  # list and aliases
  list|-l|--list)
    do_list "${@}";;
  -a|--all)
    do_list --all;;
  -r|--running)
    do_list --running;;

  # start
  start|-s|--start)
    do_start "${@}";;
  # stop
  stop|-S|--stop)
    do_stop "${@}";;
  # reset/restart
  restart|-R|--restart)
    do_restart "${@}";;
  # suspend
  suspend|--suspend)
    do_suspend "${@}";;
  # pause
  pause|--pause)
    do_pause "${@}";;
  # unpause
  unpause|--unpause)
    do_unpause "${@}";;
  # meh
  *)
    echo "invalid command: ${cmd}" >&2
    echo '' >&2
    do_help 1 >&2
    ;;
esac
