#!/bin/bash

#
# usage
#

usage() {
  echo 'Usage: git lf [options]'
  echo
  echo 'Options:'
  echo '  -h, --help            Print this message and exit'
  echo '  -t, --top=N           Take top N (default: 20)'
  echo '  -u, --size-unit=U     Size unit (default: K)'
  exit "${1}"
}

#
# parse command line arguments
#

TOP='20'
SIZE_UNIT=K
ARGS=()

PARSE='true'
while [[ -n "${1}" ]]; do
  if ${PARSE}; then
    case "${1}" in
      -h|--help)
        usage 0;;

      -t|--top)
        TOP="${2}"; shift;;
      --top=*)
        TOP="${1:5}";;
      -t*)
        TOP="${1:2}";;

      -u|--size-unit)
        SIZE_UNIT="${2}"; shift;;
      --size-unit=*)
        SIZE_UNIT="${1:12}";;
      -u*)
        SIZE_UNIT="${1:2}";;

      --)
        PARSE='false';;
      -*)
        echo "${0}: invalid option: ${1}" >&2; echo >&2; usage 1 >&2;;
      *)
        ARGS+=("${1}");;
    esac
  else
    ARGS+=("${1}")
  fi

  shift
done

set -- "${ARGS[@]}"

#
# check args
#

if [[ -z "${TOP}" || ! "${TOP}" =~ ^[0-9]+$ ]]; then
  echo "git-lf: Invalid TOP value: ${TOP}" >&2
  echo >&2
  usage 1>&2
fi

if [[ "${TOP}" = '0' ]]; then
  TOP='2147483647'  # 2^31 - 1
fi

#
# do some actual work
#

GIT_DIR="${PWD}"
while [[ ! -e "${GIT_DIR}/.git" && "${GIT_DIR}" != '/' && -n "${GIT_DIR}" ]]; do
  GIT_DIR="${GIT_DIR%/*}"
done

if [[ -z "${GIT_DIR}" || "${GIT_DIR}" = '/' ]]; then
  echo 'git-lf: not a git repository!' >&2
  exit 1
fi

GIT_DIR="${GIT_DIR}/.git"

{
  echo 'SHA|Size|Packed|Path'
  echo ':separator:'
  git verify-pack -v ${GIT_DIR}/objects/pack/pack-*.idx | grep ' blob ' | sort -k3nr | head -n ${TOP} | while read -r OBJECT; do
    set -- ${OBJECT}
    SHA="${1}"
    UNPACKED_SIZE="${3}"
    PACKED_SIZE="${4}"
    FILE="$(git --git-dir="${GIT_DIR}" rev-list --all --objects | grep "${SHA}" | cut -f2- -d' ')"

    if [[ "${SIZE_UNIT}" =~ ^[kK] ]]; then
      UNPACKED_SIZE=$(echo "scale=2; ${UNPACKED_SIZE} / 1024" | bc | sed 's/^\./0./')k
      PACKED_SIZE=$(echo "scale=2; ${PACKED_SIZE} / 1024" | bc | sed 's/^\./0./')k
    elif [[ "${SIZE_UNIT}" =~ ^[mM] ]]; then
      UNPACKED_SIZE=$(echo "scale=2; ${UNPACKED_SIZE} / 1024 / 1024" | bc | sed 's/^\./0./')m
      PACKED_SIZE=$(echo "scale=2; ${PACKED_SIZE} / 1024 / 1024" | bc | sed 's/^\./0./')m
    elif [[ "${SIZE_UNIT}" =~ ^[gG] ]]; then
      UNPACKED_SIZE=$(echo "scale=2; ${UNPACKED_SIZE} / 1024 / 1024 / 1024" | bc | sed 's/^\./0./')g
      PACKED_SIZE=$(echo "scale=2; ${PACKED_SIZE} / 1024 / 1024 / 1024" | bc | sed 's/^\./0./')g
    fi

    echo "${SHA}|${UNPACKED_SIZE}|${PACKED_SIZE}|${FILE}"
  done
} | text-table -s'|' -a'2:right' -a'3:right'
